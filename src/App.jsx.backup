import { useEffect, useState, useCallback } from 'react';
import Search from './components/search.jsx';
import Spinner from "./components/Spinner.jsx";
import MovieCard from "./components/MovieCard.jsx";
import FilterSort from "./components/FilterSort.jsx";
import { useDebounce } from "react-use";
import { getTrendingMovies, updateSearchCount } from "./appwrite.js";
import { Analytics } from '@vercel/analytics/react';

// Constants moved outside component to prevent recreation on renders
const API_BASE_URL = 'https://api.themoviedb.org/3';
const API_KEY = import.meta.env.VITE_TMDB_API_KEY;

const API_OPTIONS = {
    method: 'GET',
    headers: {
        accept: 'application/json',
        Authorization: `Bearer ${API_KEY}`
    }
};

const App = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const [movieList, setMovieList] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');
    const [trendingMovies, setTrendingMovies] = useState([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(0);
    const [selectedMovieId, setSelectedMovieId] = useState(null);
    const [favorites, setFavorites] = useState(() => {
        const saved = localStorage.getItem('movieFavorites');
        return saved ? JSON.parse(saved) : [];
    });
    const [filters, setFilters] = useState({
        with_genres: [],
        year: null
    });
    const [sortOption, setSortOption] = useState('popularity.desc');
    // New states for movie details modal
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedMovie, setSelectedMovie] = useState(null);
    const [movieDetails, setMovieDetails] = useState(null);
    const [isLoadingDetails, setIsLoadingDetails] = useState(false);

    useDebounce(() => setDebouncedSearchTerm(searchTerm), 500, [searchTerm]);

    // Memoize fetchMovies with useCallback to prevent recreation on every render
    const fetchMovies = useCallback(async (query = '', page = 1) => {
        setIsLoading(true);
        setErrorMessage('');

        try {
            let endpoint = query
                ? `${API_BASE_URL}/search/movie?query=${encodeURIComponent(query)}&page=${page}`
                : `${API_BASE_URL}/discover/movie?sort_by=${sortOption}&page=${page}`;

            // Add filters to the endpoint
            if (!query) {
                if (filters.with_genres && filters.with_genres.length > 0) {
                    endpoint += `&with_genres=${filters.with_genres.join(',')}`;
                }
                if (filters.year) {
                    endpoint += `&primary_release_year=${filters.year}`;
                }
            }

            const response = await fetch(endpoint, API_OPTIONS);

            if (!response.ok) {
                throw new Error(`Network response error: ${response.status}`);
            }

            const data = await response.json();

            if (data.Response === 'False') {
                setErrorMessage(data.Error || 'Failed to fetch movies');
                setMovieList([]);
                return;
            }

            setMovieList(data.results || []);
            setTotalPages(data.total_pages > 500 ? 500 : data.total_pages); // TMDB API limits to 500 pages max

            // Only update search count if there are results
            if (query && data.results?.length > 0) {
                await updateSearchCount(query, data.results[0]);
            }
        } catch (error) {
            console.error('Movie fetch error:', error);
            if (error.message.includes('Network response error')) {
                setErrorMessage(`API Error: ${error.message}. Please check your internet connection.`);
            } else if (error.message.includes('Failed to fetch')) {
                setErrorMessage('Unable to connect to movie database. Please check your internet connection.');
            } else {
                setErrorMessage('Something went wrong. Please try again later.');
            }
        } finally {
            setIsLoading(false);
        }
    }, [filters, sortOption]);


    // New function to fetch movie details
    const fetchMovieDetails = useCallback(async (movieId) => {
        if (!movieId) return;

        setIsLoadingDetails(true);

        try {
            // Fetch basic movie details
            const detailsResponse = await fetch(
                `${API_BASE_URL}/movie/${movieId}?append_to_response=credits,videos`,
                API_OPTIONS
            );

            if (!detailsResponse.ok) {
                throw new Error(`Failed to fetch movie details: ${detailsResponse.status}`);
            }

            const details = await detailsResponse.ok ? await detailsResponse.json() : null;
            setMovieDetails(details);
        } catch (error) {
            console.error('Error fetching movie details:', error);
            setErrorMessage('Failed to load movie details');
        } finally {
            setIsLoadingDetails(false);
        }
    }, []);

    // Handle filter changes
    const handleFilterChange = (filterName, value) => {
        setFilters(prev => ({
            ...prev,
            [filterName]: value
        }));
        setCurrentPage(1); // Reset to first page when filters change
    };

    // Handle sort changes
    const handleSortChange = (sortValue) => {
        setSortOption(sortValue);
        setCurrentPage(1); // Reset to first page when sort changes
    };

    // Load trending movies (memoized)
    const loadTrendingMovies = useCallback(async () => {
        try {
            const movies = await getTrendingMovies();
            setTrendingMovies(movies);
        } catch (error) {
            console.error(`Error fetching trending movies: ${error}`);
        }
    }, []);

    // Effect for searching movies
    useEffect(() => {
        let isMounted = true;
        
        const fetchData = async () => {
            await fetchMovies(debouncedSearchTerm, currentPage);
        };
        
        fetchData();
        
        // Cleanup function to prevent memory leaks
        return () => {
            isMounted = false;
        };
    }, [debouncedSearchTerm, currentPage, fetchMovies]);

    // Effect for initial load of trending movies
    useEffect(() => {
        loadTrendingMovies();
    }, [loadTrendingMovies]);

    // Updated handleSelectMovie function to open the modal with details
    const handleSelectMovie = (movieId) => {
        setSelectedMovieId(movieId);
        setIsModalOpen(true);

        // Find the basic movie data from our list
        const movie = movieList.find(m => m.id === movieId);
        setSelectedMovie(movie);

        // Fetch additional details
        fetchMovieDetails(movieId);
    };

    // Add modal close function
    const closeModal = () => {
        setIsModalOpen(false);
        setSelectedMovie(null);
        setMovieDetails(null);
    };

    const toggleFavorite = (movie) => {
        setFavorites(prev => {
            const isFavorited = prev.some(fav => fav.id === movie.id);

            let newFavorites;
            if (isFavorited) {
                newFavorites = prev.filter(fav => fav.id !== movie.id);
            } else {
                newFavorites = [...prev, movie];
            }

            localStorage.setItem('movieFavorites', JSON.stringify(newFavorites));
            return newFavorites;
        });
    };

    const isFavorite = (movieId) => {
        return favorites.some(fav => fav.id === movieId);
    };
    // Scroll to the movies cards 
    const scrollToTop = () => {
        const moviesSection = document.querySelector('.all-movies');
        if (moviesSection) {
            moviesSection.scrollIntoView({ behavior: 'smooth' });
        }


    };

    useEffect(() => {
        scrollToTop();
    }, []);
    // Movie Details Modal Component
    const MovieDetailsModal = () => {
        if (!isModalOpen || !selectedMovie) return null;

        return (
            <div className="movie-details-modal" onClick={closeModal}>
                <div className="movie-details-content" onClick={e => e.stopPropagation()}>
                    <button className="close-btn" onClick={closeModal}>×</button>

                    {isLoadingDetails ? (
                        <div className="p-8 flex flex-col items-center justify-center">
                            <Spinner />
                            <p className="mt-4 text-light-200">Loading movie details...</p>
                        </div>
                    ) : movieDetails ? (
                        <div className="movie-details-header">
                            <img
                                className="movie-poster"
                                src={movieDetails.poster_path
                                    ? `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`
                                    : '/no-poster.png'
                                }
                                alt={movieDetails.title}
                            />

                            <div className="movie-info">
                                <h2>{movieDetails.title}</h2>

                                {movieDetails.tagline && (
                                    <div className="tagline">{movieDetails.tagline}</div>
                                )}

                                <div className="movie-meta">
                                    {movieDetails.release_date && (
                                        <span className="year">{new Date(movieDetails.release_date).getFullYear()}</span>
                                    )}
                                    {movieDetails.release_date && movieDetails.runtime && (
                                        <span className="separator">•</span>
                                    )}
                                    {movieDetails.runtime && (
                                        <span className="runtime">{movieDetails.runtime} mins</span>
                                    )}
                                    {movieDetails.runtime && movieDetails.vote_average && (
                                        <span className="separator">•</span>
                                    )}
                                    {movieDetails.vote_average && (
                                        <div className="rating">
                                            <img src="/star.svg" alt="rating" />
                                            <p>{movieDetails.vote_average?.toFixed(1) || 'N/A'}</p>
                                        </div>
                                    )}
                                </div>

                                {movieDetails.genres && movieDetails.genres.length > 0 && (
                                    <div className="genres">
                                        {movieDetails.genres.map(genre => (
                                            <span key={genre.id} className="genre-tag">
                                                {genre.name}
                                            </span>
                                        ))}
                                    </div>
                                )}

                                <div className="overview">
                                    <h3 className="text-xl font-bold text-white mb-2">Overview</h3>
                                    <p className="text-light-200 leading-relaxed">{movieDetails.overview || 'No overview available'}</p>
                                </div>

                                {movieDetails.credits && movieDetails.credits.cast && movieDetails.credits.cast.length > 0 && (
                                    <div className="cast">
                                        <h3 className="text-xl font-bold text-white mb-2">Cast</h3>
                                        <div className="flex flex-wrap gap-2 mt-2">
                                            {movieDetails.credits.cast
                                                .slice(0, 5)
                                                .map((person, index, array) => (
                                                    <span key={person.id} className="text-light-200">
                                                        {person.name}
                                                        {index < array.length - 1 && ', '}
                                                    </span>
                                                ))
                                            }
                                        </div>
                                    </div>
                                )}

                                {movieDetails.videos &&
                                    movieDetails.videos.results &&
                                    movieDetails.videos.results.length > 0 && (() => {
                                        // Filter official trailers
                                        const officialTrailer = movieDetails.videos.results.find(
                                            (video) => video.type === "Trailer" && video.site === "YouTube"
                                        );

                                        // If no official trailer, pick the first available video
                                        const selectedVideo = officialTrailer || movieDetails.videos.results[0];

                                        return selectedVideo ? (
                                            <div className="trailer-container">
                                                <h3 className="text-xl font-bold text-white mb-4">Trailer</h3>
                                                <iframe
                                                    className="rounded-lg w-full aspect-video"
                                                    src={`https://www.youtube.com/embed/${selectedVideo.key}`}
                                                    title={selectedVideo.name}
                                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                                    allowFullScreen
                                                ></iframe>
                                            </div>
                                        ) : null;
                                    })()}

                            </div>
                        </div>
                    ) : (
                        <div className="p-8 text-center text-light-200">
                            Failed to load movie details
                        </div>
                    )}
                </div>
            </div>
        );
    };

    // Extracted TrendingMovies component for better readability
    const TrendingMovies = () => {
        if (!trendingMovies.length) return null;

        return (
            <section className="trending">
                <h2>Trending Movies</h2>
                <ul>
                    {trendingMovies.map((movie, index) => (
                        <li key={movie.$id}>
                            <p>{index + 1}</p>
                            <img src={movie.poster_url} alt={movie.title} />
                            <p>{movie.title}</p>
                        </li>
                    ))}
                </ul>
            </section>
        );
    };

    // Add pagination controls component
    const PaginationControls = () => {
        if (totalPages <= 1) return null;

        return (
            <div className="pagination">
                <button
                    onClick={() => {
                        setCurrentPage(prev => Math.max(prev - 1, 1));
                        scrollToTop();

                    }}
                    disabled={currentPage === 1}
                    className="pagination-btn"
                >
                    Previous
                </button>
                <span className="page-info">Page {currentPage} of {totalPages}</span>
                <button
                    onClick={() => {
                        setCurrentPage(prev => Math.min(prev + 1, totalPages));
                        scrollToTop();
                    }}
                    disabled={currentPage === totalPages}
                    className="pagination-btn"
                >
                    Next
                </button>
            </div >
        );
    };

    return (
        <main>
            <div className="pattern" />
            <div className="wrapper">
                <header>
                    <img src="/hero.png" alt="The movies" />
                    <h1>Find <span className="text-gradient">Movies</span> You&#39;ll enjoy without the hassle</h1>
                    <Search searchTerm={searchTerm} setSearchTerm={setSearchTerm} />
                </header>

                <TrendingMovies />

                <section className="all-movies">
                    <h2>All Movies</h2>

                    {!debouncedSearchTerm && (
                        <FilterSort
                            onFilterChange={handleFilterChange}
                            onSortChange={handleSortChange}
                            currentFilters={filters}
                            currentSort={sortOption}
                        />
                    )}

                    {isLoading ? (
                        <Spinner />
                    ) : errorMessage ? (
                        <p className="text-red-500">{errorMessage}</p>
                    ) : (
                        <>
                            <ul>
                                {movieList.map((movie) => (
                                    <MovieCard
                                        key={movie.id}
                                        movie={movie}
                                        onSelectMovie={handleSelectMovie}
                                        isFavorite={isFavorite(movie.id)}
                                        onToggleFavorite={toggleFavorite}
                                    />
                                ))}
                            </ul>
                            <PaginationControls />
                        </>
                    )}
                </section>

                {/* Render the movie details modal */}
                <MovieDetailsModal />
            </div>
            <Analytics />
        </main>

    );
};

export default App;